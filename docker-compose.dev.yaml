services:
  postgres:
    container_name: average_incomes.postgres
    image: postgres:15
    hostname: postgres
    env_file:
      - config/.env.dev
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
    ports:
      - 5432:5432
    volumes:
      - .:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U dev -d dev'"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 30s
  migrations-up:
    container_name: average_incomes.migrations-up
    environment:
      - GOOSE_DRIVER=${GOOSE_DRIVER}
      - GOOSE_DBSTRING=${GOOSE_DBSTRING}
    build:
      context: .
      dockerfile: Dockerfile.migrations
    command: ["goose", "-dir", "migrations", "up"]
    depends_on:
      postgres:
        condition: service_healthy
  migrations-down:
    container_name: average_incomes.migrations-down
    environment:
      - GOOSE_DRIVER=${GOOSE_DRIVER}
      - GOOSE_DBSTRING=${GOOSE_DBSTRING}
    build:
      context: .
      dockerfile: Dockerfile.migrations
    command: ["goose", "-dir", "migrations", "reset"]
    profiles:
      - migrations-down
    depends_on:
      postgres:
        condition: service_healthy
  reader-up:
    env_file:
      - config/.env.dev
    environment:
      - READER_NAME=${READER_NAME}
      - POSTGRES_DSN=${POSTGRES_DSN}
    container_name: ${READER_NAME}
    build:
      context: .
      dockerfile: Dockerfile.reader
    volumes:
      - ./db-files:/db-files
      - ./config/.env.dev:/app/config/.env.dev
    working_dir: /app
    depends_on:
      - migrations-up
  api-up:
    env_file:
      - config/.env.dev
    environment:
      - API_CONTAINER_NAME=${API_NAME}
      - API_PORT=${API_PORT}
      - POSTGRES_DSN=${POSTGRES_DSN}
    container_name: average_incomes.api
    build:
      context: .
      dockerfile: Dockerfile.api
    image: donskova1ex/api:latest
    ports:
      - 8080:${API_PORT}
    volumes:
      - ./config/.env.dev:/app/config/.env.dev
    working_dir: /app
    depends_on:
      - reader-up



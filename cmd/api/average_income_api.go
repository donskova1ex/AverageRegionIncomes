// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger user management service - OpenAPI 3.0
 *
 * This is a sample some AverageRegionIncomes
 *
 * API version: 1.0.0
 */

package main

import (
	"context"
	"github.com/donskova1ex/AverageRegionIncomes/internal/middleware"
	"github.com/donskova1ex/AverageRegionIncomes/internal/processors"
	"github.com/donskova1ex/AverageRegionIncomes/internal/repositories"
	"github.com/jmoiron/sqlx"
	"log/slog"
	"net/http"
	"os"

	openapi "github.com/donskova1ex/AverageRegionIncomes/openapi"
)

func main() {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	logJSONHandler := slog.NewJSONHandler(os.Stdout, nil)
	logger := slog.New(logJSONHandler)
	slog.SetDefault(logger)
	logger.Info(
		"Server started",
	)

	cfg, err := repositories.DefaultParserConfig("/app/.env.dev")
	if err != nil {
		logger.Error("failed to load configuration", slog.String("err", err.Error()))
		os.Exit(1)
	}
	logger.Info("Configuration loaded")

	db, err := repositories.NewPostgresDB(ctx, cfg.PGDSN)
	if err != nil {
		logger.Error("error connecting to database", slog.String("err", err.Error()))
		return
	}
	defer func(db *sqlx.DB) {
		err := db.Close()
		if err != nil {
			logger.Error("error closing db", slog.String("err", err.Error()))
		}
	}(db)

	repository := repositories.NewRepository(db, logger)

	regionIncomesProcessor := processors.NewAverageIncome(repository, logger)
	GetRegionIncomesAPIService := openapi.NewGetRegionIncomesAPIService(regionIncomesProcessor, logger)
	GetRegionIncomesAPIController := openapi.NewGetRegionIncomesAPIController(GetRegionIncomesAPIService)

	router := openapi.NewRouter(GetRegionIncomesAPIController)

	requestLogger := middleware.RequestLogger(logger)
	router.Use(middleware.RequestIDMiddleware, requestLogger)

	httpServer := http.Server{
		Addr:     ":" + "8080",
		ErrorLog: slog.NewLogLogger(logJSONHandler, slog.LevelError),
		Handler:  router,
	}

	logger.Info("application started", slog.String("port", ":8080"))

	if err := httpServer.ListenAndServe(); err != nil {
		logger.Error("failed to start server", slog.String("err", err.Error()))
	}
	//TODO: GracefulCloser
	//log.Fatal(http.ListenAndServe(":8080", router))
}

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger user management service - OpenAPI 3.0
 *
 * This is a sample some AverageRegionIncomes
 *
 * API version: 1.0.0
 */

package openapi

import (
	"net/http"
	"strings"
)

// GetRegionIncomesAPIController binds http requests to an api service and writes the service results to the http response
type GetRegionIncomesAPIController struct {
	service      GetRegionIncomesAPIServicer
	errorHandler ErrorHandler
}

// GetRegionIncomesAPIOption for how the controller is set up.
type GetRegionIncomesAPIOption func(*GetRegionIncomesAPIController)

// WithGetRegionIncomesAPIErrorHandler inject ErrorHandler into controller
func WithGetRegionIncomesAPIErrorHandler(h ErrorHandler) GetRegionIncomesAPIOption {
	return func(c *GetRegionIncomesAPIController) {
		c.errorHandler = h
	}
}

// NewGetRegionIncomesAPIController creates a default api controller
func NewGetRegionIncomesAPIController(s GetRegionIncomesAPIServicer, opts ...GetRegionIncomesAPIOption) *GetRegionIncomesAPIController {
	controller := &GetRegionIncomesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GetRegionIncomesAPIController
func (c *GetRegionIncomesAPIController) Routes() Routes {
	return Routes{
		"GetRegionIncomes": Route{
			strings.ToUpper("Get"),
			"/api/v1/regionincomes",
			c.GetRegionIncomes,
		},
	}
}

// GetRegionIncomes - Get average region incomes
func (c *GetRegionIncomesAPIController) GetRegionIncomes(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var regionidParam int32
	if query.Has("regionid") {
		param, err := parseNumericParameter[int32](
			query.Get("regionid"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "regionid", Err: err}, nil)
			return
		}

		regionidParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "regionid"}, nil)
		return
	}
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "year", Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var quarterParam int32
	if query.Has("quarter") {
		param, err := parseNumericParameter[int32](
			query.Get("quarter"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "quarter", Err: err}, nil)
			return
		}

		quarterParam = param
	} else {
	}
	result, err := c.service.GetRegionIncomes(r.Context(), regionidParam, yearParam, quarterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

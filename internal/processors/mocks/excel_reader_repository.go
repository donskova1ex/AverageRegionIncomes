// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/donskova1ex/AverageRegionIncomes/internal/processors (interfaces: ExcelReaderRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/excel_reader_repository.go -package=mocks -mock_names=ExcelReaderRepository=ExcelReaderRepository . ExcelReaderRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/donskova1ex/AverageRegionIncomes/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// ExcelReaderRepository is a mock of ExcelReaderRepository interface.
type ExcelReaderRepository struct {
	ctrl     *gomock.Controller
	recorder *ExcelReaderRepositoryMockRecorder
	isgomock struct{}
}

// ExcelReaderRepositoryMockRecorder is the mock recorder for ExcelReaderRepository.
type ExcelReaderRepositoryMockRecorder struct {
	mock *ExcelReaderRepository
}

// NewExcelReaderRepository creates a new mock instance.
func NewExcelReaderRepository(ctrl *gomock.Controller) *ExcelReaderRepository {
	mock := &ExcelReaderRepository{ctrl: ctrl}
	mock.recorder = &ExcelReaderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ExcelReaderRepository) EXPECT() *ExcelReaderRepositoryMockRecorder {
	return m.recorder
}

// CreateRegionIncomes mocks base method.
func (m *ExcelReaderRepository) CreateRegionIncomes(ctx context.Context, exRegionIncomes []*domain.ExcelRegionIncome) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegionIncomes", ctx, exRegionIncomes)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRegionIncomes indicates an expected call of CreateRegionIncomes.
func (mr *ExcelReaderRepositoryMockRecorder) CreateRegionIncomes(ctx, exRegionIncomes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegionIncomes", reflect.TypeOf((*ExcelReaderRepository)(nil).CreateRegionIncomes), ctx, exRegionIncomes)
}

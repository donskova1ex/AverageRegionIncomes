// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/donskova1ex/AverageRegionIncomes/internal/processors (interfaces: AverageIncomeLogger)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

)

// AverageIncomeLogger is a mock of AverageIncomeLogger interface.
type AverageIncomeLogger struct {
	ctrl     *gomock.Controller
	recorder *AverageIncomeLoggerMockRecorder
}

// AverageIncomeLoggerMockRecorder is the mock recorder for AverageIncomeLogger.
type AverageIncomeLoggerMockRecorder struct {
	mock *AverageIncomeLogger
}

// NewAverageIncomeLogger creates a new mock instance.
func NewAverageIncomeLogger(ctrl *gomock.Controller) *AverageIncomeLogger {
	mock := &AverageIncomeLogger{ctrl: ctrl}
	mock.recorder = &AverageIncomeLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AverageIncomeLogger) EXPECT() *AverageIncomeLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
	m.ctrl.T.Helper()
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*AverageIncomeLogger)(nil).Error), varargs...)
}

// Info mocks base method.
	m.ctrl.T.Helper()
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*AverageIncomeLogger)(nil).Info), varargs...)
}
